// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card {
  id          String   @id @default(cuid())
  name        String
  type        CardType // Talisman, Arma, Totem, Aliado, Oro
  cost        Int?     // Coste (null para oros que no cuestan)
  attack      Int?     // Fuerza/Ataque (solo para Aliados)
  defense     Int?     // Defensa (solo para Aliados)
  description String?  // Habilidad/Descripción
  imageUrl    String?  // URL completa de la imagen
  imageFile   String?  // Nombre del archivo de imagen (ej: "001.png")
  rarity      RarityType // común, poco común, rara, mítica, legendaria
  expansion   String   // Nombre de la expansión/edición
  isActive    Boolean  @default(false) // Si la carta está completada y lista
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  deckCards   DeckCard[]

  @@map("cards")
}

enum CardType {
  TALISMAN
  ARMA
  TOTEM
  ALIADO
  ORO
}

enum RarityType {
  VASALLO
  CORTESANO
  REAL
  MEGA_REAL
  ULTRA_REAL
  LEGENDARIA
  PROMO
  SECRETA
}

model Deck {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  deckCards   DeckCard[]

  @@map("decks")
}

model DeckCard {
  id       String @id @default(cuid())
  deckId   String
  cardId   String
  quantity Int    @default(1)

  // Relaciones
  deck     Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  card     Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([deckId, cardId])
  @@map("deck_cards")
}
